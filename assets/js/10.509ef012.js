(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{488:function(t,a,s){t.exports=s.p+"assets/img/pic1.519b6c2e.png"},489:function(t,a,s){t.exports=s.p+"assets/img/pic2.261ba486.png"},490:function(t,a,s){t.exports=s.p+"assets/img/pic3.ea4933ab.png"},491:function(t,a,s){t.exports=s.p+"assets/img/pic4.00fdb790.png"},492:function(t,a,s){t.exports=s.p+"assets/img/pic5.2d314a7d.png"},493:function(t,a,s){t.exports=s.p+"assets/img/pic6.9ee0726c.png"},494:function(t,a,s){t.exports=s.p+"assets/img/pic7.e124ee8d.png"},641:function(t,a,s){"use strict";s.r(a);var n=s(2),_=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-前言"}},[t._v("#")]),t._v(" 1 前言")]),t._v(" "),a("p",[t._v("AWTK 全称 Toolkit AnyWhere，是 ZLG 基于 C 语言开发的开源 GUI 引擎，旨在为用户提供一个功能强大、高效可靠、简单易用、可轻松做出炫酷效果的 GUI 引擎。")]),t._v(" "),a("ul",[a("li",[t._v("官网连接："),a("a",{attrs:{href:"https://www.zlg.cn/index/pub/awtk.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.zlg.cn/index/pub/awtk.html"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("GitHub仓库："),a("a",{attrs:{href:"https://github.com/zlgopen/awtk",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/zlgopen/awtk"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("GUI 框架的核心主要包含以下两点：")]),t._v(" "),a("ol",[a("li",[t._v("界面绘制。")]),t._v(" "),a("li",[t._v("消息响应。")])]),t._v(" "),a("p",[t._v("其中又以界面绘制最为重要，在学习、使用以及完善 AWTK 的过程中，我逐渐对 AWTK 的绘制流程即原理有了大致的了解，在此非常感谢领导和同事对我的指导与培训，本文对学到的东西做个记录。")]),t._v(" "),a("h2",{attrs:{id:"_2-绘制的基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-绘制的基础知识"}},[t._v("#")]),t._v(" 2 绘制的基础知识")]),t._v(" "),a("p",[t._v("在分析 AWTK 的绘制流程前首先需要简单了解一下计算机绘制与显示的基础知识。")]),t._v(" "),a("h3",{attrs:{id:"_2-1-屏幕显示图像的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-屏幕显示图像的原理"}},[t._v("#")]),t._v(" 2.1 屏幕显示图像的原理")]),t._v(" "),a("p",[t._v("首先，第一个问题，屏幕时怎么显示图像的？计算机显示到屏幕上的图像其实就是位图（Bitmap），是由许多个像素点构成的，每个像素点又通过 RGB 三原色组成。")]),t._v(" "),a("p",[t._v("由于屏幕上的像素点很密集，所以肉眼一般是看不见像素点之间的缝隙的，比如 1080p 的屏幕，其分辨率为 1080 X 1920，也就是说屏幕上有约 200 万个像素点。")]),t._v(" "),a("p",[t._v("而屏幕对应的显存就是一个存放这些像素点颜色数据的二维数组，每个像素点对应一个数组元素，元素中存储像素的 RGB 值，通过混合三种颜色的到最终显示到屏幕上的颜色。")]),t._v(" "),a("p",[t._v("屏幕显示一帧图像是有一个过程的，一般是从左上角的原点开始逐个打点，一个像素一个像素得绘制，从左往右、从上之下，直到屏幕的右下角。这里所说的原点位置和刷新方向不是固定的，不同的屏幕可能不同，甚至部分屏幕可以设置这些参数。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(488),alt:"PIC1"}})]),t._v(" "),a("p",[t._v("常见的屏幕颜色位数详见下表")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("24位色")]),t._v(" "),a("th",[t._v("16位色")]),t._v(" "),a("th",[t._v("8位色")]),t._v(" "),a("th",[t._v("1位色(单色)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("格式")]),t._v(" "),a("td",[t._v("RGB8888、BGR8888")]),t._v(" "),a("td",[t._v("RGB565、BGR565、RGB5551、BGR5551")]),t._v(" "),a("td",[t._v("8位灰度图")]),t._v(" "),a("td",[t._v("单色图")])]),t._v(" "),a("tr",[a("td",[t._v("能显示的颜色个数")]),t._v(" "),a("td",[t._v("2^24")]),t._v(" "),a("td",[t._v("2^16 或 2^15(剩下一位表示像素点亮或不亮)")]),t._v(" "),a("td",[t._v("2^8")]),t._v(" "),a("td",[t._v("2")])])])]),t._v(" "),a("p",[t._v("通常来讲，会根据 LCD 屏幕的颜色格式分配一块或多块 LCD 大小的显存存放屏幕中像素点的颜色数据，俗称显存，又称 FrameBuffer，简称 fb。")]),t._v(" "),a("h3",{attrs:{id:"_2-2-光栅化和反走样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-光栅化和反走样"}},[t._v("#")]),t._v(" 2.2 光栅化和反走样")]),t._v(" "),a("p",[t._v("我们通常所讲的几何图形是一个数学概念，但屏幕是由像素点组成的，是点阵状的，几何图形中的线和区域在屏幕中都只能通过打点的形式来表现，光栅化就是指这个过程，如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(489),alt:"PIC2"}})]),t._v(" "),a("p",[t._v("光栅化就是将几何图形（浮点坐标）转化成离散的点阵图像（整数坐标），这个过程肯定伴随着精度丢失，上图可以很明显得看出来。")]),t._v(" "),a("blockquote",[a("p",[t._v("备注：简单理解，计算机绘图主要分为两种，svg 和 位图，svg 就需要光栅化转成点阵，而位图本身就是点阵。")])]),t._v(" "),a("p",[t._v("图像走样是由于光栅化过程中丢失了一些数据导致出现锯齿形或者阶梯状外观。而反走样是通过各种手段来改善图像走样的效果不佳的技术，如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(490),alt:"PIC3"}})]),t._v(" "),a("h2",{attrs:{id:"_3-awtk-中提供的画布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-awtk-中提供的画布"}},[t._v("#")]),t._v(" 3 AWTK 中提供的画布")]),t._v(" "),a("p",[t._v("AWTK 提供了两种画布：普通（canvas）和矢量图画布（vgcanvas），通过调用这两种画布提供的画图接口，可以实现不同的绘图功能。")]),t._v(" "),a("ul",[a("li",[t._v("canvas：普通画布可以实现一些简单的绘制功能，如：绘制水平或垂直直线、文本、图片、矩形等。如果需要绘制比较复杂一点的图形就需要使用矢量图画布，如：绘制椭圆、圆弧等。")]),t._v(" "),a("li",[t._v("vgcanvas：与 canvas 相比 vgcanvas 的效率要低一些，但功能也丰富些。绘制一些简单的图形，如线条、矩形等可以用 canvas；复杂一点图形，如圆角矩形就用 vgcanvas。")])]),t._v(" "),a("blockquote",[a("p",[t._v("备注：即使是渲染同一个效果，vgcanvas 也会比 canvas 慢。")])]),t._v(" "),a("h2",{attrs:{id:"_4-awtk-gui-界面绘制流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-awtk-gui-界面绘制流程"}},[t._v("#")]),t._v(" 4 AWTK GUI 界面绘制流程")]),t._v(" "),a("h3",{attrs:{id:"_4-1-界面控件结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-界面控件结构"}},[t._v("#")]),t._v(" 4.1 界面控件结构")]),t._v(" "),a("p",[t._v("在 AWTK 中，界面控件是一个树状的结构，全局的 window_manager 是控件树的根节点，所有的窗口和控件都由它进行最终的管理，结构示意图如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(491),alt:"PIC4"}})]),t._v(" "),a("h3",{attrs:{id:"_4-2-控件绘制流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-控件绘制流程"}},[t._v("#")]),t._v(" 4.2 控件绘制流程")]),t._v(" "),a("p",[t._v("AWTK 有一个 GUI 主线程循环，该循环会不断调用以下函数：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* awtk/src/main_loop/main_loop_simple.c */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ret_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main_loop_simple_step")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("main_loop_t")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" curr_expected_sleep_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFFFFFFF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("main_loop_simple_t")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" loop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("main_loop_simple_t")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main_loop_dispatch_input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main_loop_dispatch_events")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("event_source_manager_dispatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("event_source_manager"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("window_manager_check_and_layout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("window_manager_paint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  curr_expected_sleep_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("window_manager_get_curr_expected_sleep_time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main_loop_set_curr_expected_sleep_time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" curr_expected_sleep_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" RET_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("main_loop_dispatch_input 函数：获取输入设备的信息。")]),t._v(" "),a("li",[t._v("event_source_manager_dispatch 函数：处理输入设备信息。")]),t._v(" "),a("li",[t._v("main_loop_dispatch_events 函数：处理定时器和 idle 等消息源。")]),t._v(" "),a("li",[t._v("window_manager_check_and_layout 函数：完成 UI 布局的相关操作。")]),t._v(" "),a("li",[t._v("window_manager_paint 函数：完成 GUI 界面的绘制")])]),t._v(" "),a("p",[t._v("其中，window_manager_paint 函数会深度遍历树状结构的 UI 树，并且把相关的 UI 控件绘制到屏幕上面，早画的控件会被晚画的控件覆盖，绘制每一个控件的流程如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(492),alt:"PIC5"}})]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* awtk/base/widget.c */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ret_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("widget_paint_impl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("widget_t")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("canvas_t")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int32_t")]),t._v(" ox "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int32_t")]),t._v(" oy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" save_alpha "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("global_alpha"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("opacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" TK_OPACITY_ALPHA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("canvas_set_global_alpha")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("opacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" save_alpha"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xff")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("astyle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ox "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("style_get_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("astyle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" STYLE_ID_X_OFFSET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    oy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("style_get_int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("astyle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" STYLE_ID_Y_OFFSET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("canvas_translate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("widget_on_paint_begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("widget_on_paint_background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("widget_on_paint_self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("widget_on_paint_children")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("widget_on_paint_border")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("widget_on_paint_end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("canvas_untranslate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("opacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" TK_OPACITY_ALPHA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("canvas_set_global_alpha")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" save_alpha"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("widget_on_paint_done")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" RET_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("AWTK 控件绘图流程，一般都是先绘制控件背景，再绘制控件本身，然后再绘制控件的子集，最后绘制控件的边框，通过不断递归重复这一流程，绘制所有控件。在绘制相关的函数中，主要通过调用 canvas 或 vgcanvsa 的相关接口将对应的数据绘制到画布上。")]),t._v(" "),a("h2",{attrs:{id:"_5-awtk的绘制原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-awtk的绘制原理"}},[t._v("#")]),t._v(" 5 AWTK的绘制原理")]),t._v(" "),a("p",[t._v("AWTK 常用的渲染模式有两种，分别为 AGGE 和 OpenGL。前者是软件渲染，主要通过 CPU 来计算界面数据并将其拷贝到显存中实现显示，兼容性比较好，但渲染效果一般，速度慢，适合没有 GPU 的嵌入式平台；后者基于 OpenGL/GLES 实现，渲染效果好，适合有 GPU 的平台，常用于 PC。")]),t._v(" "),a("p",[t._v("由于 AWTK 中 OpenGL 模式下的绘图过程比较绕，后面我们先从方便理解的 AGGE 模式入手。")]),t._v(" "),a("h3",{attrs:{id:"_5-1-awtk中的nanovg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-awtk中的nanovg"}},[t._v("#")]),t._v(" 5.1 AWTK中的NANOVG")]),t._v(" "),a("p",[t._v("NANOVG 是第三方的矢量画布库，默认只提供 OpenGL 的适配，但它本身是支持重载的，因此，后面 AWTK 中自行增加了 AGGE 的适配。")]),t._v(" "),a("p",[t._v("在 AWTK 中，存在 NANOVG 前后端的概念，具体定义如下：")]),t._v(" "),a("ul",[a("li",[t._v("NANOVG 前端：指 NANOVG 对外提供的抽象接口，供画布类型调用。")]),t._v(" "),a("li",[t._v("NANOVG 后端：指 NANOVG 的具体实现，即真正的将图像数据绘制到屏幕上，比如默认提供的 OpenGL，以及 AWTK 后来增加 AGGE。")])]),t._v(" "),a("p",[t._v("NANOVG 的作用其实就是给 AWTK 提供了矢量画布的功能。")]),t._v(" "),a("h3",{attrs:{id:"_5-2-agge模式绘制流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-agge模式绘制流程"}},[t._v("#")]),t._v(" 5.2 AGGE模式绘制流程")]),t._v(" "),a("p",[t._v("AGGE 是一个非常小的开源矢量画布类库，并且该类库是基于软件渲染实现，代码大概有 3000 多行，非常适合嵌入式平台使用，选择 AGGE 作为 AWTK 的矢量画布实现时，界面的绘制原理详见下文。")]),t._v(" "),a("h4",{attrs:{id:"_5-2-1-普通画布canvas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-普通画布canvas"}},[t._v("#")]),t._v(" 5.2.1 普通画布canvas")]),t._v(" "),a("p",[a("strong",[t._v("普通画布 canvas 的主要功能")]),t._v("：渲染贴图，渲染文字，填充矩形，渲染矩形边框，填充圆角矩形和渲染圆角矩形边框。")]),t._v(" "),a("p",[a("strong",[t._v("普通画布 canvas 的绘制流程")]),t._v("：canvas 画布底层是通过调用 lcd_t 类的接口来实现相应的效果，lcd_t 类是平台相关的，通常由适配层实现，这里用的是 lcd_mem.inc 中的实现将图像绘制到显存。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(493),alt:"PIC6"}})]),t._v(" "),a("blockquote",[a("p",[t._v("备注：在 AWTK 中，默认提供了软件绘图的实现，用户只需实现 awtk/src/base/g2d.h 文件中的相关接口，再定义宏 "),a("code",[t._v("WITH_G2D")]),t._v(" 即可采用硬件加速绘图，具体可以看 AWTK 的移植文档："),a("a",{attrs:{href:"awtk.zlg.cn/docs"}},[t._v("awtk.zlg.cn/docs")]),t._v("。")])]),t._v(" "),a("h4",{attrs:{id:"_5-2-2-矢量画布vgcanvas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-矢量画布vgcanvas"}},[t._v("#")]),t._v(" 5.2.2 矢量画布vgcanvas")]),t._v(" "),a("p",[a("strong",[t._v("矢量画布 vgcanvas 的绘制流程")]),t._v("：vgcanvas 画布通过调用 NANOVG 的相关接口来实现相应的效果，此处 NANOVG 后端用 AGGE 实现。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(494),alt:"PIC7"}})]),t._v(" "),a("p",[a("strong",[t._v("本质上来说 AGGE 绘图的过程，就是矢量路径的图形光栅化，然后在显示到屏幕上面。")])]),t._v(" "),a("p",[t._v("此外，vgcanvas 在 AWTK 中能实现绘图的核心函数为 "),a("strong",[t._v("canvas_get_vgcanvas")]),t._v("，该函数可以重载，主要用于获取 vgcanvas_t 对象，将 vgcanvas_t 与 lcd_t 对象绑定并更新 fb 地址，确保图像数据能绘制到正确的显存上。")]),t._v(" "),a("blockquote",[a("p",[t._v("备注")]),t._v(" "),a("ol",[a("li",[t._v("在 AWTK 中 vgcanvas 对象一般情况下有且只有一个单例对象。")]),t._v(" "),a("li",[t._v("AWTK 有可能使用多缓冲机制，因此在使用 vgcanvas 对象前需更新 fb 地址，确保可以将内容正确画到当前的 fb 上。")]),t._v(" "),a("li",[t._v("nanovg_agge 由 vgcanvas_nanovg_soft.inc 实现。")])])]),t._v(" "),a("h3",{attrs:{id:"_5-3-opengl模式绘制流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-opengl模式绘制流程"}},[t._v("#")]),t._v(" 5.3 OpenGL模式绘制流程")]),t._v(" "),a("p",[t._v("OpenGL（Open Graphics Library）是用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序变成接口，具有渲染效果好、效率高的优点。在 AWTK 中常用于 Windows、Ubuntu、树莓派等平台。")]),t._v(" "),a("p",[t._v("AWTK 提供了三个版本的 OpenGL 实现：GLES3、GLES2、GL3，可以在 awtk_config.py 文件中可以进行配置：")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## awtk/awtk_config.py")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" OS_NAME "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Windows'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    TK_ROOT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TK_ROOT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\\\\\'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    NANOVG_BACKEND "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GLES2'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    NANOVG_BACKEND "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GL3'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# VGCANVAS='CAIRO'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NANOVG_BACKEND='GLES2'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NANOVG_BACKEND='GLES3'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NANOVG_BACKEND='AGG'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NANOVG_BACKEND='BGFX'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NANOVG_BACKEND='AGGE'")]),t._v("\n")])])]),a("h4",{attrs:{id:"_5-3-1-普通画布canvas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-普通画布canvas"}},[t._v("#")]),t._v(" 5.3.1 普通画布canvas")]),t._v(" "),a("p",[t._v("与 AGGE 渲染模式不同，OpenGL 渲染模式下的 canvas 画布底层虽然也是通过调用 lcd_t 类的接口来实现相应的效果，但是 lcd_t 类的接口却不是用 lcd_mem.inc 了，而是直接改用 vgcanvas 实现，即 lcd_vgcanvas.inc。")]),t._v(" "),a("p",[t._v("也就是说，在 OpenGL 渲染模式下无论是使用 cnavas 画布绘图还是使用 vgcanvas 画布绘图，最终被调用的都是 vgcanvas。")]),t._v(" "),a("p",[t._v("canvas --\x3e lcd --\x3e vgcanvas：最后由 vgcanvas 调用 opengl 的接口将界面画到显存上")]),t._v(" "),a("h4",{attrs:{id:"_5-3-2-矢量画布vgcanvas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-矢量画布vgcanvas"}},[t._v("#")]),t._v(" 5.3.2 矢量画布vgcanvas")]),t._v(" "),a("p",[t._v("与 AGGE 渲染模式一样，OpenGL 渲染模式下的 vgcanvas 画布通过调用 NANOVG 的相关接口来实现相应的效果，只不过此处 NANOVG 后端采用 OpenGL 实现。")]),t._v(" "),a("blockquote",[a("p",[t._v("备注：nanovg_gl 由 vgcanvas_nanovg_gl.inc 实现。")])]),t._v(" "),a("h2",{attrs:{id:"_6-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-总结"}},[t._v("#")]),t._v(" 6 总结")]),t._v(" "),a("h3",{attrs:{id:"_6-1-绘制流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-绘制流程"}},[t._v("#")]),t._v(" 6.1 绘制流程")]),t._v(" "),a("p",[t._v("AWTK 绘制界面主要有两个途径，一是调用 canvas 画布，二是调用 vgcanvas 画布，其中 canvas 画布的绘制主要看 lcd_t 的实现；vgcanvas 画布的绘制主要看 NANOVG 后端的实现。")]),t._v(" "),a("ol",[a("li",[t._v("canvas 是一个抽象的上层概念，无法直接操作显存，通过 lcd_t 来绘制图像，主要提供给用户使用。")]),t._v(" "),a("li",[t._v("lcd_t 对象如何操作显存主要看它的实现，这里在 OpenGL 渲染模式下比较特殊，借助 vgcanvas 来绘制。")]),t._v(" "),a("li",[t._v("vgcanvas 调用 NANOVG 的接口来绘图，其具体实现要看后端。")])]),t._v(" "),a("h3",{attrs:{id:"_6-1-绘制原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-绘制原理"}},[t._v("#")]),t._v(" 6.1 绘制原理")]),t._v(" "),a("p",[t._v("开头就讲了 LCD 显示的原理实际上就是将图像的像素数据写到 LCD 对应的显存中，那么 AWTK 绘制界面的基本原理其实就是将 UI 控件、图片(jpg、png、gif等)、字体、矢量图(svg)等信息融合成 LCD 颜色格式的位图数据拷贝到显存中。")]),t._v(" "),a("p",[t._v("canvas 可以直接贴图，vgcanvas 则是将矢量路径转成光栅化的位图再贴到显存上。")]),t._v(" "),a("blockquote",[a("p",[t._v("备注：AWTK 借助了 stb 库将图片(jpg、png、gif等)和矢量字体(ttf)转化成位图，再绘制到界面上。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);