(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{567:function(t,s,a){t.exports=a.p+"assets/img/test_v_mode.dd77d75b.png"},568:function(t,s,a){t.exports=a.p+"assets/img/include_file.32583979.png"},569:function(t,s,a){t.exports=a.p+"assets/img/pass.6866b7b6.png"},570:function(t,s,a){t.exports=a.p+"assets/img/fail.d4d4376a.png"},677:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-前言"}},[t._v("#")]),t._v(" 1 前言")]),t._v(" "),s("p",[t._v("在大学的时候，写代码随心所欲，想到什么就写什么，只顾实现功能，也不会去验证代码的可行性和稳定性，往往都会在在后续的使用过程中出现各种各样的问题，然后再去捉虫，这样写出来的代码质量差，在后期又耗费大量的时间修复旧代码bug。")]),t._v(" "),s("p",[t._v("参加工作后，接触到了单元测试，在第一个月的考核项目（智能家居控制面板）中，通过请教同事和参考AWTK源码中的单元测试代码，磕磕绊绊得写了一些单元测试，但由于没有设计好项目基础框架，业务逻辑和用户界面没有完全分离，因此只做了文件读写模块和网络通信模块的单元测试。刚好在本周的培训内容中又详细讲了单元测试的FIRST原则，以下记录了单元测试的学习感悟，并使用Google公司开源的C/C++单元测试框架——GTest进进行单元测试。")]),t._v(" "),s("blockquote",[s("p",[t._v("备注：AWTK是ZLG开源的GUI框架：https://github.com/zlgopen/awtk")])]),t._v(" "),s("h2",{attrs:{id:"_2-什么是单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是单元测试"}},[t._v("#")]),t._v(" 2 什么是单元测试？")]),t._v(" "),s("p",[t._v("软件测试包括单元测试、集成测试、系统测试。")]),t._v(" "),s("ol",[s("li",[t._v("单元测试：对软件设计的最小单位进行正确性测试，以检验程序单元是否满足功能、性能、接口、设计规约等要求。")]),t._v(" "),s("li",[t._v("集成测试：将各个程序单元进行有序的、递增的组合进行测试，以检验各个程序单元的配合情况。")]),t._v(" "),s("li",[t._v("系统测试：对集合了应用软件、系统软件、硬件的产品进行测试，以验证产品在实际应用中的功能、性能等特性。")])]),t._v(" "),s("p",[t._v("根据传统的开发模型，如瀑布模型，软件开发过程和软件测试活动的关系可以反映为经典的软件测试V模型，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(567),alt:"软件测试V模型"}})]),t._v(" "),s("p",[t._v("其中单元测试中的单元指软件中承担单一职责的单位，通常在程序中体现为一个函数、一个文件、一个类、一个模块等。单元测试都是以自动化方式执行，所以在大量回归测试的场景下更能带来高收益。并且单元测试代码里会提供函数的使用示例，因为单元测试的具体表现形式就是对各种函数以各种不同输入参数组合进行调用。")]),t._v(" "),s("h2",{attrs:{id:"_3-为什么需要单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么需要单元测试"}},[t._v("#")]),t._v(" 3 为什么需要单元测试？")]),t._v(" "),s("p",[t._v("在我随心所欲写程序时，经常会遇到一些问题，例如：")]),t._v(" "),s("ul",[s("li",[t._v("编译通过，但是要调试好久才能正常运行；")]),t._v(" "),s("li",[t._v("好不容易调试好了，但是一测试就会出一堆bug；")]),t._v(" "),s("li",[t._v("修复已有的bug，总会产生新的bug；")]),t._v(" "),s("li",[t._v("bug难以重现，又无法定位；")]),t._v(" "),s("li",[t._v("等等......")])]),t._v(" "),s("p",[t._v("以上问题总结一下，就是“你写的代码并不是你想要的结果”，而单元测试则是能保证“你写的代码是你想要的结果”的最有效办法。")]),t._v(" "),s("p",[t._v("单元测试阶段发现的bug更容易定位，并且由于单元测试自动化的特点，更加方便重现bug。在单元测试阶段发现bug，立即修复，不会将各种问题留到最后的系统测试阶段，让代码更可靠、更容易维护，减少后期测试、维护的成本。")]),t._v(" "),s("p",[t._v("总的来讲，单元测试能够提升代码质量，减少程序整体的调试时间。")]),t._v(" "),s("h2",{attrs:{id:"_4-如何做好单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何做好单元测试"}},[t._v("#")]),t._v(" 4 如何做好单元测试？")]),t._v(" "),s("p",[t._v("单元测试需要遵循FIRST原则：")]),t._v(" "),s("ol",[s("li",[t._v("F-FAST（快速原则）：单元测试应该是可以快速运行的，在各种测试方法中，单元测试的运行速度是最快的，大型项目的单元测试通常应该在几分钟内运行完毕。")]),t._v(" "),s("li",[t._v("I-Independent（独立原则）：单元测试应该是可以独立运行的，单元测试用例互相无强依赖，无对外部资源的强依赖。")]),t._v(" "),s("li",[t._v("R-Repeatabl（可重复原则）：单元测试应该可以稳定重复的运行，并且每次运行的结果都是稳定可靠的。")]),t._v(" "),s("li",[t._v("S-Self Validating（自我验证原则）：单元测试应该是用例自动进行验证的，不能依赖人工验证。")]),t._v(" "),s("li",[t._v("T-Timely（及时原则）：单元测试必须及时进行编写，更新和维护，以保证用例可以随着业务代码的变化动态的保障质量。")])]),t._v(" "),s("p",[t._v("下面会基于GTest框架来说明这五个原则。")]),t._v(" "),s("h2",{attrs:{id:"_5-基于gtest进行单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-基于gtest进行单元测试"}},[t._v("#")]),t._v(" 5 基于GTest进行单元测试")]),t._v(" "),s("h3",{attrs:{id:"_5-1-快速了解gtest"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-快速了解gtest"}},[t._v("#")]),t._v(" 5.1 快速了解GTest")]),t._v(" "),s("p",[t._v("GTest全称GoogleTest，是Google公司发布的一款非常优秀的开源C/C++单元测试框架，已被应用于多个开源项目及Google内部项目中，包括ChromeWeb浏览器、LLVM编译器框架等。")]),t._v(" "),s("blockquote",[s("p",[t._v("备注：GTest源码：https://github.com/google/googletest")])]),t._v(" "),s("p",[t._v("下载或克隆源码后，可以看见目录结构如下图，通常我们进行单元测试时需要用到目录是include和src。配置工程需要做以下三件事：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("包含目录：")]),t._v(" "),s("ul",[s("li",[t._v("[GTest目录名]/googletest/include;")]),t._v(" "),s("li",[t._v("[GTest目录名]/googletest;")])])]),t._v(" "),s("li",[s("p",[t._v("添加源文件：")]),t._v(" "),s("ul",[s("li",[t._v("[GTest目录名]/googletest/src/gtest-all.cc;")])])]),t._v(" "),s("li",[s("p",[t._v("包含头文件：")])])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<gtest/gtest.h>")])]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:a(568),alt:"包含文件"}})]),t._v(" "),s("p",[t._v("进行单元测试前我们需要了解两个概念：测试用户、测试用例集。")]),t._v(" "),s("ul",[s("li",[t._v("测试用例：为了验证代码的行为与预期是否相符而进行的一系列活动，在单元测试中，这一系列的活动依靠代码来完成。")]),t._v(" "),s("li",[t._v("测试用例集：多个相似或相关的测试用例的集合，是为了方便我们对测试用例进行管理而产生的一个概念。通俗一点，测试用例集就是对测试用例进行分组。")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TEST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("IsLeapYearTest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" leapYear"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 用例集IsLeapYearTest，用例leapYear */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("EXPECT_TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsLeapYear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 测试IsLeapYear函数，传入参数2000 */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("EXPECT_TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsLeapYear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1996")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("写好测试用例后，需要运行测试用例，代码如下：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  testing"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("FLAGS_gtest_filter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" “"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 选择需要运行的用例 */")]),t._v("\n  testing"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("InitGoogleMock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("argc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 初始化测试框架 */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("RUN_ALL_TESTS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 运行所选测试用例 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("写好测试用例后，GTest中可以用一下方式表示测试用例：")]),t._v(" "),s("ul",[s("li",[t._v('"用例集.用例"，例如： "IsLeapYearTest. leapYear"；')]),t._v(" "),s("li",[t._v('可以使用通配符"*"和"?"，例如："IsLeapYearTest.*"；')]),t._v(" "),s("li",[t._v('使用":"连接多个匹配条件，例如："*. leapYear : *. commonYear"；')]),t._v(" "),s("li",[t._v('使用"-"排除用例，例如："-IsLeapYearTest.*"；')])]),t._v(" "),s("h3",{attrs:{id:"_5-2-断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-断言"}},[t._v("#")]),t._v(" 5.2 断言")]),t._v(" "),s("p",[t._v("断言可以理解为判断一个值或多个值是否满足指定条件，例如：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("说明")]),t._v(" "),s("th",[t._v("断言的宏调用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("判断一个值是否为真")]),t._v(" "),s("td",[t._v("EXPECT_TRUE(val)")])]),t._v(" "),s("tr",[s("td",[t._v("判断一个值是否与期望值相等")]),t._v(" "),s("td",[t._v("EXPECT_EQ(exp, val)")])]),t._v(" "),s("tr",[s("td",[t._v("判断两个值的大小")]),t._v(" "),s("td",[t._v("EXPECT_LE(val1, val2)")])]),t._v(" "),s("tr",[s("td",[t._v("判断一个字符串是否与期望值相等")]),t._v(" "),s("td",[t._v("EXPECT_STREQ(exp, val)")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("备注：更多GTest中断言的宏请查阅文档：[GTest目录名]/googletest/docs/primer.md")])]),t._v(" "),s("p",[t._v("当判定通过时，无输出，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(569),alt:"判定通过"}})]),t._v(" "),s("p",[t._v("当判定失败时，GTest会输出断言位置和失败原因，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(570),alt:"判定失败"}})]),t._v(" "),s("p",[t._v("GTest中断言的宏可以理解为两类：ASSERT、EXPECT。")]),t._v(" "),s("ul",[s("li",[t._v("ASSERT_*：当检查点失败时，退出当前函数（执行return操作）。")]),t._v(" "),s("li",[t._v("EXPECT_*：当检查点失败时，继续往下执行。")])]),t._v(" "),s("h3",{attrs:{id:"_5-3-使用gtest说明first原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-使用gtest说明first原则"}},[t._v("#")]),t._v(" 5.3 使用GTest说明FIRST原则")]),t._v(" "),s("p",[t._v("看完以上内容，应该对GTest有了简单的认识，接下来就使用GTest框架来举例说明FIRST原则。")]),t._v(" "),s("h4",{attrs:{id:"_5-3-1-f-fast-快速原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-f-fast-快速原则"}},[t._v("#")]),t._v(" 5.3.1 F-FAST（快速原则）")]),t._v(" "),s("p",[t._v("在调试程序的过程中，需要多次运行单元测试去验证被测试模块是否正确，应该为了节省时间，单元测试必须可以快速执行。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TEST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" basic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 测试文件接口的基本功能 */")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ASSERT_EQ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fs_test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("os_fs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" RET_OK"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 测试获取文件系统对象函数os_fs() */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_5-3-2-i-independent-独立原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-i-independent-独立原则"}},[t._v("#")]),t._v(" 5.3.2 I-Independent（独立原则）")]),t._v(" "),s("p",[t._v("单元测试可独立运行，测试用例直接无依赖，对外部资源无依赖，测试顺序不影响测试结果，测试过程中产生的外部资源文件需要在测试完成后销毁。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 测试文件接口的读取功能 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TEST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Fs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" read_part"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" filename "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.bin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 测试前要创建被读取的文件 */")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file_write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file_read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 进行测试，对读取到的结果ret进行验证 */")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ASSERT_EQ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file_read_part")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buff"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ASSERT_EQ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strcmp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ASSERT_EQ")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 测试完成后删除被读取的文件，并释放缓冲区 */")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file_remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TKMEM_FREE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_5-3-3-r-repeatabl-可重复原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-3-r-repeatabl-可重复原则"}},[t._v("#")]),t._v(" 5.3.3 R-Repeatabl（可重复原则）")]),t._v(" "),s("p",[t._v("单元测试需要可以稳定重复的运行，每次得到的结果需要保持一致，如果连测试结果都不稳定，或者测试过程经常出现失败的情况，那么单元测试也没有意义了。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TEST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RandomNumber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Compared"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 测试随机数比较大小 */")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ASSERT_TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 无法保证每次结果都一致 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"_5-3-4-s-self-validating-自我验证原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-4-s-self-validating-自我验证原则"}},[t._v("#")]),t._v(" 5.3.4 S-Self Validating（自我验证原则）")]),t._v(" "),s("p",[t._v("单元测试由用例自动进行验证的，不依赖人工验证，这是因为人工验证耗费不必要的时间，而且没有办法保证验证结果的准确性，通常来说单元测试的自我验证就是由测试程序直接告诉开发者通过或不通过，不需要让开发者通过输出结果来判断自己的测试用例是否通过。例如GTest的测试用例输出，输出OK表示通过，如下所示：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" RUN      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Fs.basic        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# RUN表示执行Fs.basic测试用例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("       OK "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Fs.basic "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" ms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OK表示Fs.basic用例测试通过")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" RUN      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Fs.read_part\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("       OK "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" Fs.read_part "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"_5-3-5-t-timely-及时原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-5-t-timely-及时原则"}},[t._v("#")]),t._v(" 5.3.5 T-Timely（及时原则）")]),t._v(" "),s("p",[t._v("单元测试必须及时进行编写，更新和维护，以保证用例可以随着业务代码的变化动态的保障质量。单元测试通常是在写函数实现前就需要写好的，这样能让单元测试在开发者写函数实现的过程中起到校验的作用，避免开发者犯错。")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("TEST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Function"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 测试某模块的功能（函数） */")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ASSERT_TRUE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 先按照期望结果测试function()，再去写function()的实现 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);